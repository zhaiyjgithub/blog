# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ihms-api-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  stage: dev
  httpApi: # Configure a custom authorizer for all the http api. Like SendMessage API below.
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizer
        identitySource: # Required header keys in api header
          - $request.header.x-api-key
          - $request.header.x-app-name
        resultTtlInSeconds: 300
        enableSimpleResponses: true
        payloadVersion: "2.0"
  environment: # Create environment variables for all lambda functions.
    stage: ${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - '*'
          Resource:
            - '*'

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  authorizer: # Lambda function name
    handler: bin/authorizer
    environment: # Create a environment variable for this lambda function only
      salt: ~!@9&6_!@$@56d
  sendMessage: # Lambda function name
    handler: bin/sendMessage # Lambda function handler. See Makefile
    environment: # Create a environment variable for this lambda function only
      sqs_sender_worker_queue_name: SenderWorker
      email_sender: chuck.zhaiyj@gmail.com
      email_sender_app_password: <App Password>
    events: # Configure this lambda function as httpApi drivered and authed by custom authorizer.
      - httpApi:
          path: /sendMessage
          method: post
          authorizer:
            name: customAuthorizer
  senderWorker:
    handler: bin/worker
    events: # Configure this lambda function as SQS lambda trigger.
      - sqs:
          batchSize: 10
          maximumBatchingWindow: 60
          arn:
            Fn::GetAtt:
              - SenderWorkerQueue
              - Arn
resources:
  Resources: # Configure some required aws resource. Here is SQS only
    SenderWorkerQueue: # aws resource name. It will refered by senderWorker lambda function.
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "SenderWorker" # Set SQS queue name. Serverless Framework will create a SQS with this queue name.
